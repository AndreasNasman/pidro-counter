{"version":3,"sources":["components/app/types.ts","components/keypad/styles.ts","constants/colors.ts","components/keypad/keypad.tsx","constants/game.ts","components/scoreboard/styles.ts","components/scoreboard/scoreboard.tsx","components/toolbar/styles.ts","components/toolbar/toolbar.tsx","components/app/styles.ts","components/app/app.tsx","serviceWorker.ts","index.tsx"],"names":["Phases","Button","styled","button","_templateObject","props","active","activeColor","DigitContainer","div","_templateObject2","H2","h2","_templateObject3","Container","_templateObject4","TeamContainer","_templateObject5","Keypad","_ref","phase","teams","updateSet","_useState","useState","Array","from","MAXIMUM_POINTS","keys","map","digit","digits","Object","slicedToArray","_useState3","undefined","_useState4","selectedTeam","setSelectedTeam","_useState5","_useState6","selectedDigit","setSelectedDigit","useEffect","points","team","handleTeamClick","event","newSelectedTeam","currentTarget","textContent","handleDigitClick","newSelectedDigit","Number","react_default","a","createElement","Bidding","key","onClick","value","Row","styles_templateObject","Body","styles_templateObject2","Cell","styles_templateObject3","Column","styles_templateObject4","Foot","styles_templateObject5","Head","_templateObject6","Table","_templateObject7","scoreboardMinHeight","Scoreboard","game","_useState2","setScoreboardMinHeight","bodyColumnRef","useRef","headRef","footRef","footCellRef","current","scrollIntoView","behavior","block","length","useLayoutEffect","currentHeadRef","currentFootRef","currentCellRef","newScoreboardMinHeight","concat","offsetHeight","ref","set","score","round","reduce","sum","Answer","span","toolbar_styles_templateObject","color","ChoiceContainer","toolbar_styles_templateObject2","Confirmation","toolbar_styles_templateObject3","toolbar_styles_templateObject4","H4","h4","toolbar_styles_templateObject5","IconWrapper","styles_templateObject6","Toolbar","resetScore","popoverOpen","setPopoverOpen","closePopover","replay","styles_Container","md","dist_default","content","_ref2","position","targetRect","popoverRect","dist","arrowColor","isOpen","onClickOutside","padding","Felt","app_styles_templateObject","SPACING","Grid","app_styles_templateObject2","GlobalStyle","createGlobalStyle","app_styles_templateObject3","initialGame","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","rootElement","document","getElementById","ReactDOM","render","storedGame","sessionStorage","getItem","JSON","parse","setGame","currentSet","storedRedoHistory","setItem","stringify","bid","toConsumableArray","slice","objectSpread","Score","winner","biddingPoints","biddingTeam","result","Fragment","scoreboard_Scoreboard","toolbar_Toolbar","keypad_Keypad","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.19af1ca6.chunk.js","sourcesContent":["export type Team = 'vi' | 'de';\n\nexport interface IResult {\n  points: number;\n  team: Team;\n}\n\nexport enum Phases {\n  Bidding,\n  Score,\n}\n\nexport type Score = { [K in Team]: number };\n\nexport interface ISet {\n  bid?: IResult;\n  phase: Phases;\n  round: number;\n  score?: Score;\n}\n\nexport type Game = ISet[];\n","import styled, { StyledComponent } from 'styled-components';\nimport { PLAYING_CARD_WHITE } from '../../constants/colors';\nimport { IButton } from './types';\n\nconst BUTTON_GAP: number = 0.1;\n\nexport const Button: StyledComponent<'button', {}, IButton> = styled.button`\n  background-color: ${(props: IButton): string =>\n    props.active ? PLAYING_CARD_WHITE : 'transparent'};\n  border: 0.25rem solid ${PLAYING_CARD_WHITE};\n  border-radius: 0.5rem;\n  color: ${(props: IButton): string =>\n    props.active ? props.activeColor : PLAYING_CARD_WHITE};\n  font-size: 1.5rem;\n  font-weight: bold;\n  padding: 0.5rem;\n  text-transform: uppercase;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const DigitContainer: StyledComponent<'div', {}> = styled.div`\n  display: grid;\n  grid-gap: ${BUTTON_GAP}rem;\n  grid-template-columns: 1fr 1fr 1fr;\n`;\n\nexport const H2: StyledComponent<'h2', {}> = styled.h2`\n  color: ${PLAYING_CARD_WHITE};\n  margin-bottom: 0.5rem;\n  margin-top: 0;\n  text-align: center;\n`;\n\nexport const Container: StyledComponent<'div', {}> = styled.div`\n  align-content: center;\n  display: grid;\n  grid-area: keypad;\n  min-width: max-content;\n`;\n\nexport const TeamContainer: StyledComponent<'div', {}> = styled.div`\n  column-gap: ${BUTTON_GAP}rem;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  margin-bottom: ${BUTTON_GAP}rem;\n`;\n","export const BLACK_BOARD: string = '#282828';\nexport const CHALK_WHITE: string = '#fefeff';\nexport const DECK_BLUE: string = '#12257d';\nexport const DECK_RED: string = '#ea3f42';\nexport const FELT_GREEN: string = '#006e3b';\nexport const PLAYING_CARD_BLACK: string = '#000';\nexport const PLAYING_CARD_RED: string = '#ff534f';\nexport const PLAYING_CARD_WHITE: string = '#fff';\n","import React, {\n  FunctionComponent,\n  ReactElement,\n  useEffect,\n  useState,\n} from 'react';\nimport { PLAYING_CARD_BLACK, PLAYING_CARD_RED } from '../../constants/colors';\nimport { MAXIMUM_POINTS, MINIMUM_POINTS } from '../../constants/game';\nimport { Phases, Team } from '../app/types';\nimport { Button, Container, DigitContainer, H2, TeamContainer } from './styles';\nimport { IProps } from './types';\n\nexport const Keypad: FunctionComponent<IProps> = ({\n  phase,\n  teams,\n  updateSet,\n}: IProps): ReactElement => {\n  const [digits] = useState(() =>\n    Array.from(Array(MAXIMUM_POINTS - MINIMUM_POINTS + 1).keys()).map(\n      (digit: number) => digit + MINIMUM_POINTS,\n    ),\n  );\n  const [selectedTeam, setSelectedTeam] = useState<Team | undefined>(undefined);\n  const [selectedDigit, setSelectedDigit] = useState<number | undefined>(\n    undefined,\n  );\n\n  useEffect(() => {\n    if (selectedTeam === undefined || selectedDigit === undefined) {\n      return undefined;\n    }\n\n    updateSet({ points: selectedDigit, team: selectedTeam });\n    setSelectedTeam(undefined);\n    setSelectedDigit(undefined);\n  }, [selectedTeam, selectedDigit]);\n\n  const handleTeamClick: (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => void = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    const newSelectedTeam: Team = event.currentTarget.textContent as Team;\n\n    if (newSelectedTeam === selectedTeam) return;\n\n    setSelectedTeam(newSelectedTeam);\n  };\n\n  const handleDigitClick: (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => void = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    const { textContent } = event.currentTarget;\n    const newSelectedDigit: number = Number(textContent);\n\n    if (newSelectedDigit === selectedDigit) return;\n\n    setSelectedDigit(newSelectedDigit);\n  };\n\n  return (\n    <Container>\n      {phase === Phases.Bidding ? <H2>Vem bjöud?</H2> : <H2>Vem vann?</H2>}\n\n      <TeamContainer>\n        {teams.map((team: Team) => (\n          <Button\n            active={team === selectedTeam}\n            activeColor={PLAYING_CARD_BLACK}\n            key={team}\n            onClick={handleTeamClick}\n          >\n            {team}\n          </Button>\n        ))}\n      </TeamContainer>\n\n      <DigitContainer>\n        {digits.map((digit: number) => (\n          <Button\n            active={digit === selectedDigit}\n            activeColor={PLAYING_CARD_RED}\n            key={digit}\n            onClick={handleDigitClick}\n            value={digit}\n          >\n            {digit}\n          </Button>\n        ))}\n      </DigitContainer>\n    </Container>\n  );\n};\n","export const MAXIMUM_POINTS: number = 14;\nexport const MINIMUM_POINTS: number = 6;\n","import styled, { StyledComponent } from 'styled-components';\nimport { BLACK_BOARD, CHALK_WHITE } from '../../constants/colors';\nimport { ITable } from './types';\n\nconst Row: StyledComponent<'div', {}> = styled.div`\n  column-gap: 0.1rem;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n`;\n\nexport const Body: StyledComponent<'div', {}> = styled(Row)`\n  overflow: auto;\n`;\n\nexport const Cell: StyledComponent<'div', {}> = styled.div`\n  color: ${CHALK_WHITE};\n  font-size: 1.25rem;\n  text-align: center;\n  padding: 0.5rem;\n  text-transform: uppercase;\n`;\n\nexport const Column: StyledComponent<'div', {}> = styled.div`\n  background-color: ${BLACK_BOARD};\n`;\n\nexport const Foot: StyledComponent<'div', {}> = styled(Row)`\n  border-top: 0.2rem solid ${CHALK_WHITE};\n  font-weight: bold;\n`;\n\nexport const Head: StyledComponent<'div', {}> = styled(Row)`\n  border-bottom: 0.2rem solid ${CHALK_WHITE};\n  font-weight: bold;\n`;\n\nexport const Table: StyledComponent<'div', {}, ITable> = styled.div`\n  background-color: ${CHALK_WHITE};\n  display: grid;\n  grid-area: scoreboard;\n  grid-template-rows: auto 1fr auto;\n  min-height: ${(props: ITable): string => props.scoreboardMinHeight};\n  min-width: max-content;\n`;\n","import React, {\n  FunctionComponent,\n  MutableRefObject,\n  ReactElement,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { ISet, Team } from '../app/types';\nimport { Body, Cell, Column, Foot, Head, Table } from './styles';\nimport { IProps } from './types';\n\nexport const Scoreboard: FunctionComponent<IProps> = ({\n  game,\n  teams,\n}: IProps): ReactElement => {\n  const [scoreboardMinHeight, setScoreboardMinHeight] = useState('0');\n  const bodyColumnRef: MutableRefObject<HTMLDivElement | null> = useRef(null); // tslint:disable-line: no-null-keyword\n  const headRef: MutableRefObject<HTMLDivElement | null> = useRef(null); // tslint:disable-line: no-null-keyword\n  const footRef: MutableRefObject<HTMLDivElement | null> = useRef(null); // tslint:disable-line: no-null-keyword\n  const footCellRef: MutableRefObject<HTMLDivElement | null> = useRef(null); // tslint:disable-line: no-null-keyword\n\n  useEffect(() => {\n    const { current } = bodyColumnRef;\n    if (current === null) return undefined;\n\n    current.scrollIntoView({ behavior: 'smooth', block: 'end' });\n  }, [game.length]);\n\n  useLayoutEffect(() => {\n    const { current: currentHeadRef } = headRef;\n    const { current: currentFootRef } = footRef;\n    const { current: currentCellRef } = footCellRef;\n    if (\n      currentHeadRef === null ||\n      currentFootRef === null ||\n      currentCellRef === null\n    ) {\n      return undefined;\n    }\n\n    const newScoreboardMinHeight: string = `${currentHeadRef.offsetHeight +\n      currentFootRef.offsetHeight +\n      currentCellRef.offsetHeight}px`;\n    setScoreboardMinHeight(newScoreboardMinHeight);\n  }, []);\n\n  return (\n    <Table scoreboardMinHeight={scoreboardMinHeight}>\n      <Head ref={headRef}>\n        {teams.map((team: Team) => (\n          <Column key={team}>\n            <Cell>{team}</Cell>\n          </Column>\n        ))}\n      </Head>\n\n      <Body>\n        {teams.map((team: Team) => (\n          <Column key={team} ref={bodyColumnRef}>\n            {game.map(\n              (set: ISet) =>\n                set.score && <Cell key={set.round}>{set.score[team]}</Cell>, // tslint:disable-line: strict-boolean-expressions\n            )}\n          </Column>\n        ))}\n      </Body>\n\n      <Foot ref={footRef}>\n        {teams.map((team: Team) => (\n          <Column key={team}>\n            <Cell ref={footCellRef}>\n              {game.reduce(\n                (sum: number, set: ISet) =>\n                  set.score ? sum + set.score[team] : sum,\n                0,\n              )}\n            </Cell>\n          </Column>\n        ))}\n      </Foot>\n    </Table>\n  );\n};\n","import styled, { StyledComponent } from 'styled-components';\nimport { CHALK_WHITE } from '../../constants/colors';\nimport { IAnswer } from './types';\n\nexport const Answer: StyledComponent<'span', {}, IAnswer> = styled.span`\n  color: ${(props: IAnswer): string => props.color};\n  font-weight: bold;\n  text-transform: uppercase;\n  padding: 0.5rem;\n`;\n\nexport const ChoiceContainer: StyledComponent<'div', {}> = styled.div`\n  display: flex;\n  justify-content: space-around;\n`;\n\nexport const Confirmation: StyledComponent<'div', {}> = styled.div`\n  background-color: white;\n  border-radius: 0.5rem;\n  padding: 1rem;\n`;\n\nexport const Container: StyledComponent<'div', {}> = styled.div`\n  color: ${CHALK_WHITE};\n  display: flex;\n  font-size: 1.5rem;\n  grid-area: toolbar;\n  justify-content: space-between;\n`;\n\nexport const H4: StyledComponent<'h4', {}> = styled.h4`\n  margin-top: 0;\n  text-align: center;\n`;\n\nexport const IconWrapper: StyledComponent<'span', {}> = styled.span`\n  align-items: center;\n  display: flex;\n  padding: 0.5rem;\n`;\n","import React, { FunctionComponent, ReactElement, useState } from 'react';\nimport { MdRedo, MdReplay, MdUndo } from 'react-icons/md';\nimport Popover, {\n  ArrowContainer,\n  ContentRendererArgs,\n} from 'react-tiny-popover';\nimport {\n  DECK_BLUE,\n  DECK_RED,\n  PLAYING_CARD_WHITE,\n} from '../../constants/colors';\nimport {\n  Answer,\n  ChoiceContainer,\n  Confirmation,\n  Container,\n  H4,\n  IconWrapper,\n} from './styles';\nimport { IProps } from './types';\n\nexport const Toolbar: FunctionComponent<IProps> = ({\n  resetScore,\n}: IProps): ReactElement => {\n  const [popoverOpen, setPopoverOpen] = useState(false);\n\n  const openPopover: () => void = (): void => {\n    setPopoverOpen(true);\n  };\n\n  const closePopover: () => void = (): void => {\n    setPopoverOpen(false);\n  };\n\n  const replay: () => void = (): void => {\n    closePopover();\n    resetScore();\n  };\n\n  return (\n    <Container>\n      <IconWrapper>\n        <MdUndo />\n      </IconWrapper>\n\n      <Popover\n        content={(\n          { position, targetRect, popoverRect }: ContentRendererArgs, // tslint:disable-line: jsx-no-lambda\n        ): JSX.Element => (\n          <ArrowContainer\n            arrowColor={PLAYING_CARD_WHITE}\n            popoverRect={popoverRect}\n            position={position}\n            targetRect={targetRect}\n          >\n            <Confirmation>\n              <H4>Vill du byri nyi spel?</H4>\n              <ChoiceContainer>\n                <Answer color={DECK_BLUE} onClick={replay}>\n                  Jepp\n                </Answer>\n                <Answer color={DECK_RED} onClick={closePopover}>\n                  Nepp\n                </Answer>\n              </ChoiceContainer>\n            </Confirmation>\n          </ArrowContainer>\n        )}\n        isOpen={popoverOpen}\n        onClickOutside={closePopover}\n        padding={0}\n      >\n        <IconWrapper onClick={openPopover}>\n          <MdReplay />\n        </IconWrapper>\n      </Popover>\n\n      <IconWrapper>\n        <MdRedo />\n      </IconWrapper>\n    </Container>\n  );\n};\n","import styled, {\n  createGlobalStyle,\n  DefaultTheme,\n  GlobalStyleComponent,\n  StyledComponent,\n} from 'styled-components';\nimport { FELT_GREEN } from '../../constants/colors';\n\nconst SPACING: number = 1;\n\nexport const Felt: StyledComponent<'div', {}> = styled.div`\n  background-color: ${FELT_GREEN};\n  box-shadow: inset 0 0 10rem black;\n  display: grid;\n  height: calc(100vh - ${SPACING + SPACING}rem);\n  padding: ${SPACING}rem;\n`;\n\nexport const Grid: StyledComponent<'div', {}> = styled.div`\n  display: grid;\n  grid-template: 1fr auto auto / 1fr;\n  grid-template-areas:\n    'scoreboard'\n    'toolbar'\n    'keypad';\n  overflow: auto;\n\n  @media screen and (orientation: landscape) {\n    column-gap: ${SPACING}rem;\n    grid-template: 1fr auto / 2fr 1fr;\n    grid-template-areas:\n      'scoreboard keypad'\n      'scoreboard toolbar';\n  }\n`;\n\nexport const GlobalStyle: GlobalStyleComponent<\n  {},\n  DefaultTheme\n> = createGlobalStyle`\n  * {\n    font-family: 'Roboto', sans-serif;\n    }\n  \n  body {\n    background-color: #000;\n    overscroll-behavior: contain;\n    user-select: none;\n    -webkit-tap-highlight-color: transparent;\n    -webkit-touch-callout: none;\n  }\n`;\n","import React, {\n  FunctionComponent,\n  ReactElement,\n  useEffect,\n  useState,\n} from 'react';\nimport { MAXIMUM_POINTS } from '../../constants/game';\nimport { Keypad } from '../keypad';\nimport { Scoreboard } from '../scoreboard';\nimport { Toolbar } from '../toolbar';\nimport { Felt, GlobalStyle, Grid } from './styles';\nimport { Game, IResult, ISet, Phases, Score, Team } from './types';\n\nconst initialGame: Game = [{ phase: Phases.Bidding, round: 1 }];\n\nexport const App: FunctionComponent = (): ReactElement => {\n  const [teams] = useState<Team[]>(['vi', 'de']);\n\n  const [game, setGame] = useState<Game>(() => {\n    const storedGame: string | null = sessionStorage.getItem('game');\n    if (storedGame !== null) {\n      return JSON.parse(storedGame) as Game;\n    }\n\n    return initialGame;\n  });\n  const currentSet: ISet = game[game.length - 1];\n\n  const [redoHistory, setRedoHistory] = useState<Game | []>(() => {\n    const storedRedoHistory: string | null = sessionStorage.getItem(\n      'redoHistory',\n    );\n    if (storedRedoHistory !== null) {\n      return JSON.parse(storedRedoHistory) as Game;\n    }\n\n    return [];\n  });\n\n  useEffect(() => {\n    sessionStorage.setItem('game', JSON.stringify(game));\n  }, [game]);\n\n  const updateBid: (bid: IResult) => void = (bid: IResult): void => {\n    setGame([\n      ...game.slice(0, -1),\n      { ...currentSet, bid, phase: Phases.Score },\n    ]);\n  };\n\n  const updateScore: (winner: IResult) => void = (winner: IResult): void => {\n    const { bid } = currentSet;\n    if (!bid) return;\n    const { points: biddingPoints, team: biddingTeam } = bid;\n\n    const score: Score = teams.reduce(\n      (result: Score, team: Team) => {\n        result[team] =\n          team === winner.team ? winner.points : MAXIMUM_POINTS - winner.points;\n\n        if (team === biddingTeam && result[team] < biddingPoints) {\n          result[team] = -biddingPoints;\n        }\n\n        return result;\n      },\n      {} as Score, // tslint:disable-line: no-object-literal-type-assertion\n    );\n\n    setGame([\n      ...game.slice(0, -1),\n      { ...currentSet, score },\n      { phase: Phases.Bidding, round: currentSet.round + 1 },\n    ]);\n  };\n\n  const updateSet: (result: IResult) => void =\n    currentSet.phase === Phases.Bidding ? updateBid : updateScore;\n\n  const undo: () => void = (): void => {\n    setRedoHistory(game);\n\n    if (currentSet.phase === Phases.Score) {\n      setGame([\n        ...game.slice(0, -1),\n        { round: currentSet.round, phase: Phases.Bidding },\n      ]);\n    }\n  };\n\n  const resetScore: () => void = (): void => {\n    setGame(initialGame);\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Felt>\n        <Grid>\n          <Scoreboard game={game} teams={teams} />\n          <Toolbar resetScore={resetScore} />\n          <Keypad\n            phase={currentSet.phase}\n            teams={teams}\n            updateSet={updateSet}\n          />\n        </Grid>\n      </Felt>\n    </>\n  );\n};\n","/* tslint:disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import 'normalize.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-roboto';\nimport { App } from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement: HTMLElement | null = document.getElementById('root');\n\nReactDOM.render(<App />, rootElement);\n\nif (module.hot) {\n  module.hot.accept('./components/app', async () => {\n    const { App: NextApp } = await import('./components/app');\n    ReactDOM.render(<NextApp />, rootElement);\n  });\n}\n\n/*\nIf you want your app to work offline and load faster, you can change\nunregister() to register() below. Note this comes with some pitfalls.\nLearn more about service workers: http://bit.ly/CRA-PWA\n*/\nserviceWorker.register();\n"],"sourceRoot":""}