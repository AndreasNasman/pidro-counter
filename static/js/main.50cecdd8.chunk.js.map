{"version":3,"sources":["components/keypad/Keypad.module.css","serviceWorker.ts","components/keypad/Keypad.tsx","index.tsx","components/app/App.tsx","components/app/App.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","Keypad","useState","teams","activeTeam","setActiveTeam","range","MAXIMUM_POINTS","numbers","activeNumber","setActiveNumber","className","styles","container","team","map","classNames","button","black","key","onClick","number","red","rootElement","document","getElementById","ReactDOM","render","felt","grid","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,IAAM,oBAAoB,UAAY,0BAA0B,OAAS,uBAAuB,KAAO,uB,wECWnKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kFCTOC,EAAa,WAAO,IAAD,EACdC,mBAAiB,CAAC,KAAM,SAAjCC,EADuB,sBAEMD,mBAAsB,MAF5B,mBAEvBE,EAFuB,KAEXC,EAFW,OAIZH,mBAASI,IANN,EAM4BC,KAA1CC,EAJuB,sBAKUN,mBAAwB,MALlC,mBAKvBO,EALuB,KAKTC,EALS,KAO9B,OACE,yBAAKC,UAAWC,IAAOC,WACrB,yBAAKF,UAAWC,IAAOE,MACpBX,EAAMY,KAAI,SAAAD,GAAI,OACb,4BACEH,UAAWK,IAAWJ,IAAOK,OAAR,eAClBL,IAAOM,MAAQd,IAAeU,IAEjCK,IAAKL,EACLM,QAAS,kBACPf,EAAcD,IAAeU,EAAO,KAAOA,KAG5CA,OAKP,yBAAKH,UAAWC,IAAOS,QACpBb,EAAQO,KAAI,SAAAM,GAAM,OACjB,4BACEV,UAAWK,IAAWJ,IAAOK,OAAR,eAClBL,IAAOU,IAAMb,IAAiBY,IAEjCF,IAAKE,EACLD,QAAS,kBACPV,EAAgBD,IAAiBY,EAAS,KAAOA,KAGlDA,S,gCCtCPE,EAAcC,SAASC,eAAe,QAE5CC,IAASC,OAAO,mBCLa,WAC3B,OACE,yBAAKhB,UAAWC,IAAOgB,MACrB,yBAAKjB,UAAWC,IAAOiB,MACrB,kBAAC,EAAD,UDCQ,MAASN,GFgInB,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBI1InBzC,EAAOC,QAAU,CAAC,KAAO,kBAAkB,KAAO,oB","file":"static/js/main.50cecdd8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Keypad_button__712qr\",\"black\":\"Keypad_black__2wCfi\",\"red\":\"Keypad_red__1WHE_\",\"container\":\"Keypad_container__1L2sv\",\"number\":\"Keypad_number__1V1sq\",\"team\":\"Keypad_team__1zdyF\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { FC, useState } from \"react\";\nimport { Team } from \"./types\";\nimport classNames from \"classnames\";\nimport range from \"lodash.range\";\nimport styles from \"./Keypad.module.css\";\n\nconst MAXIMUM_POINTS = 14;\nconst MINIMUM_POINTS = 6;\n\nexport const Keypad: FC = () => {\n  const [teams] = useState<Team[]>([\"us\", \"they\"]);\n  const [activeTeam, setActiveTeam] = useState<Team | null>(null);\n\n  const [numbers] = useState(range(MINIMUM_POINTS, MAXIMUM_POINTS + 1));\n  const [activeNumber, setActiveNumber] = useState<number | null>(null);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.team}>\n        {teams.map(team => (\n          <button\n            className={classNames(styles.button, {\n              [styles.black]: activeTeam === team\n            })}\n            key={team}\n            onClick={(): void =>\n              setActiveTeam(activeTeam === team ? null : team)\n            }\n          >\n            {team}\n          </button>\n        ))}\n      </div>\n\n      <div className={styles.number}>\n        {numbers.map(number => (\n          <button\n            className={classNames(styles.button, {\n              [styles.red]: activeNumber === number\n            })}\n            key={number}\n            onClick={(): void =>\n              setActiveNumber(activeNumber === number ? null : number)\n            }\n          >\n            {number}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import \"./index.css\";\nimport \"typeface-roboto\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { App } from \"components/app\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(<App />, rootElement);\n\nif (module.hot) {\n  module.hot.accept(\"components/app\", () => {\n    const NextApp = require(\"components/app\").default; // eslint-disable-line global-require\n    ReactDOM.render(<NextApp />, rootElement);\n  });\n}\n\n/*\n * If you want your app to work offline and load faster, you can change\n * unregister() to register() below. Note this comes with some pitfalls.\n * Learn more about service workers: https://bit.ly/CRA-PWA\n */\nserviceWorker.unregister();\n","import { Keypad } from \"components/keypad\";\nimport React from \"react\";\nimport styles from \"./App.module.css\";\n\nexport const App: React.FC = () => {\n  return (\n    <div className={styles.felt}>\n      <div className={styles.grid}>\n        <Keypad />\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"felt\":\"App_felt__OzMyW\",\"grid\":\"App_grid__AtUjj\"};"],"sourceRoot":""}