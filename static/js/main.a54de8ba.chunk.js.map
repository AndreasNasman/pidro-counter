{"version":3,"sources":["components/app/types.ts","constants/session-storage.ts","components/keypad/styles.ts","constants/colors.ts","components/keypad/keypad.tsx","constants/game.ts","components/scoreboard/styles.ts","components/scoreboard/scoreboard.tsx","components/toolbar/styles.ts","components/toolbar/toolbar.tsx","components/app/styles.ts","components/app/app.tsx","serviceWorker.ts","index.tsx"],"names":["Phases","ITEMS","Button","styled","button","_templateObject","props","active","activeColor","DigitContainer","div","_templateObject2","H2","h2","_templateObject3","Container","_templateObject4","TeamContainer","_templateObject5","Keypad","_ref","phase","teams","updateSet","_useState","useState","range","MAXIMUM_POINTS","digits","Object","slicedToArray","_useState3","undefined","_useState4","selectedTeam","setSelectedTeam","_useState5","_useState6","selectedDigit","setSelectedDigit","useEffect","points","team","handleTeamClick","event","newSelectedTeam","currentTarget","textContent","handleDigitClick","newSelectedDigit","Number","react_default","a","createElement","Bidding","Score","map","key","onClick","digit","Row","styles_templateObject","Body","styles_templateObject2","Cell","styles_templateObject3","reverse","Column","styles_templateObject4","Content","styles_templateObject5","Emoji","span","_templateObject6","Foot","_templateObject7","Head","_templateObject8","Table","_templateObject9","scoreboardMinHeight","Scoreboard","game","_useState2","setScoreboardMinHeight","bodyColumnRef","useRef","headRef","footRef","footCellRef","current","scrollIntoView","behavior","block","useLayoutEffect","currentHeadRef","currentFootRef","currentCellRef","newScoreboardMinHeight","concat","offsetHeight","ref","last","leader","Fragment","teamIndex","sets","set","round","score","bid","winner","Answer","toolbar_styles_templateObject","color","ChoiceContainer","toolbar_styles_templateObject2","Confirmation","toolbar_styles_templateObject3","toolbar_styles_templateObject4","H4","h4","toolbar_styles_templateObject5","IconWrapper","styles_templateObject6","disabled","Toolbar","canRedo","canResetScore","canUndo","redo","resetScore","undo","popoverOpen","setPopoverOpen","closePopover","replay","styles_Container","md","dist_default","content","_ref2","position","targetRect","popoverRect","dist","arrowColor","isOpen","onClickOutside","padding","Felt","app_styles_templateObject","SPACING","Grid","app_styles_templateObject2","GlobalStyle","createGlobalStyle","app_styles_templateObject3","INITIAL_GAME","initialScore","initializeFromSessionStorage","item","fallback","storedItem","sessionStorage","getItem","JSON","parse","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","rootElement","document","getElementById","ReactDOM","render","setGame","gameHistory","setGameHistory","gameHistoryIndex","setGameHistoryIndex","setItem","stringify","getNextPhase","updateGameHistory","updatedGame","nextGameHistoryIndex","toConsumableArray","slice","length","currentSet","nextRound","objectSpread","setWinner","biddingPoints","biddingTeam","setScore","gameScore","index","find","teamScore","_gameScore","ourScore","theirScore","scoreboard_Scoreboard","toolbar_Toolbar","keypad_Keypad","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a54de8ba.chunk.js","sourcesContent":["export type Team = 'vi' | 'de';\n\nexport enum Phases {\n  Bidding = 'BIDDING',\n  Score = 'SCORE',\n}\n\nexport interface IResult {\n  points: number;\n  team: Team;\n}\n\nexport type Score = IResult[];\n\nexport interface ISet {\n  bid: IResult;\n  round: number;\n  score?: Score;\n}\n\nexport interface IGame {\n  leader?: Team;\n  phase: Phases;\n  score: Score;\n  sets: ISet[];\n  teams: Team[];\n  winner?: IResult;\n}\n","export const ITEMS: { [key: string]: string } = {\n  GAME: 'game',\n  GAME_HISTORY: 'gameHistory',\n  GAME_HISTORY_INDEX: 'gameHistoryIndex',\n};\n","import styled, { StyledComponent } from 'styled-components';\nimport { PLAYING_CARD_WHITE } from '../../constants/colors';\nimport { IButton } from './types';\n\nconst BUTTON_GAP: number = 0.1;\n\nexport const Button: StyledComponent<'button', {}, IButton> = styled.button`\n  background-color: ${(props: IButton): string =>\n    props.active ? PLAYING_CARD_WHITE : 'transparent'};\n  border: 0.25rem solid ${PLAYING_CARD_WHITE};\n  border-radius: 0.5rem;\n  color: ${(props: IButton): string =>\n    props.active ? props.activeColor : PLAYING_CARD_WHITE};\n  font-size: 1.5rem;\n  font-weight: bold;\n  padding: 0.5rem;\n  text-transform: uppercase;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const DigitContainer: StyledComponent<'div', {}> = styled.div`\n  display: grid;\n  grid-gap: ${BUTTON_GAP}rem;\n  grid-template-columns: repeat(3, 1fr);\n`;\n\nexport const H2: StyledComponent<'h2', {}> = styled.h2`\n  color: ${PLAYING_CARD_WHITE};\n  margin-bottom: 0.5rem;\n  margin-top: 0;\n  text-align: center;\n`;\n\nexport const Container: StyledComponent<'div', {}> = styled.div`\n  align-content: center;\n  display: grid;\n  grid-area: keypad;\n  min-width: max-content;\n`;\n\nexport const TeamContainer: StyledComponent<'div', {}> = styled.div`\n  column-gap: ${BUTTON_GAP}rem;\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  margin-bottom: ${BUTTON_GAP}rem;\n`;\n","export const BLACK_BOARD: string = '#282828';\nexport const CHALK_WHITE: string = '#fefeff';\nexport const DECK_BLUE: string = '#12257d';\nexport const DECK_RED: string = '#ea3f42';\nexport const FELT_GREEN: string = '#006e3b';\nexport const PLAYING_CARD_BLACK: string = '#000';\nexport const PLAYING_CARD_RED: string = '#ff534f';\nexport const PLAYING_CARD_WHITE: string = '#fff';\n","import range from 'lodash.range';\nimport React, {\n  FunctionComponent,\n  ReactElement,\n  useEffect,\n  useState,\n} from 'react';\nimport { PLAYING_CARD_BLACK, PLAYING_CARD_RED } from '../../constants/colors';\nimport { MAXIMUM_POINTS, MINIMUM_POINTS } from '../../constants/game';\nimport { Phases, Team } from '../app/types';\nimport { Button, Container, DigitContainer, H2, TeamContainer } from './styles';\nimport { IProps } from './types';\n\nexport const Keypad: FunctionComponent<IProps> = ({\n  phase,\n  teams,\n  updateSet,\n}: IProps): ReactElement => {\n  const [digits] = useState(range(MINIMUM_POINTS, MAXIMUM_POINTS + 1));\n  const [selectedTeam, setSelectedTeam] = useState<Team | undefined>(undefined);\n  const [selectedDigit, setSelectedDigit] = useState<number | undefined>(\n    undefined,\n  );\n\n  useEffect(() => {\n    if (selectedTeam === undefined || selectedDigit === undefined) {\n      return undefined;\n    }\n\n    updateSet({ points: selectedDigit, team: selectedTeam });\n    setSelectedTeam(undefined);\n    setSelectedDigit(undefined);\n  }, [selectedTeam, selectedDigit]);\n\n  const handleTeamClick: (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => void = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    const newSelectedTeam: Team = event.currentTarget.textContent as Team;\n\n    setSelectedTeam(newSelectedTeam);\n  };\n\n  const handleDigitClick: (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => void = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    const { textContent } = event.currentTarget;\n    const newSelectedDigit: number = Number(textContent);\n\n    setSelectedDigit(newSelectedDigit);\n  };\n\n  return (\n    <Container>\n      {phase === Phases.Bidding && <H2>Vem bjöud?</H2>}\n      {phase === Phases.Score && <H2>Vem vann?</H2>}\n\n      <TeamContainer>\n        {teams.map((team: Team) => (\n          <Button\n            active={team === selectedTeam}\n            activeColor={PLAYING_CARD_BLACK}\n            key={team}\n            onClick={handleTeamClick}\n          >\n            {team}\n          </Button>\n        ))}\n      </TeamContainer>\n\n      <DigitContainer>\n        {digits.map((digit: number) => (\n          <Button\n            active={digit === selectedDigit}\n            activeColor={PLAYING_CARD_RED}\n            key={digit}\n            onClick={handleDigitClick}\n          >\n            {digit}\n          </Button>\n        ))}\n      </DigitContainer>\n    </Container>\n  );\n};\n","export const MAXIMUM_POINTS: number = 14;\nexport const MINIMUM_POINTS: number = 6;\nexport const WINNING_POINTS: number = 62;\n","import styled, { StyledComponent } from 'styled-components';\nimport { BLACK_BOARD, CHALK_WHITE } from '../../constants/colors';\nimport { ICell, ITable } from './types';\n\nconst Row: StyledComponent<'div', {}> = styled.div`\n  column-gap: 0.1rem;\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n`;\n\nexport const Body: StyledComponent<'div', {}> = styled(Row)`\n  overflow: auto;\n`;\n\nexport const Cell: StyledComponent<'div', {}, ICell> = styled.div`\n  color: ${CHALK_WHITE};\n  display: grid;\n  font-size: 1.25rem;\n  grid-column-gap: 0.25rem;\n  grid-template-areas: ${(props: ICell): string =>\n    props.reverse === true ? '\"emoji content .\"' : '\". content emoji\"'};\n  grid-template-columns: repeat(3, 1fr);\n  text-align: center;\n  padding: 0.5rem;\n  text-transform: uppercase;\n`;\n\nexport const Column: StyledComponent<'div', {}> = styled.div`\n  background-color: ${BLACK_BOARD};\n`;\n\nexport const Content: StyledComponent<'div', {}> = styled.div`\n  grid-area: content;\n`;\n\nexport const Emoji: StyledComponent<'span', {}> = styled.span`\n  grid-area: emoji;\n`;\n\nexport const Foot: StyledComponent<'div', {}> = styled(Row)`\n  border-top: 0.2rem solid ${CHALK_WHITE};\n  font-weight: bold;\n`;\n\nexport const Head: StyledComponent<'div', {}> = styled(Row)`\n  border-bottom: 0.2rem solid ${CHALK_WHITE};\n  font-weight: bold;\n`;\n\nexport const Table: StyledComponent<'div', {}, ITable> = styled.div`\n  background-color: ${CHALK_WHITE};\n  display: grid;\n  grid-area: scoreboard;\n  grid-template-rows: auto 1fr auto;\n  min-height: ${(props: ITable): string => props.scoreboardMinHeight};\n  min-width: max-content;\n`;\n","import last from 'lodash.last';\nimport React, {\n  FunctionComponent,\n  MutableRefObject,\n  ReactElement,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { IResult, ISet, Team } from '../app/types';\nimport {\n  Body,\n  Cell,\n  Column,\n  Content,\n  Emoji,\n  Foot,\n  Head,\n  Table,\n} from './styles';\nimport { IProps } from './types';\n\nexport const Scoreboard: FunctionComponent<IProps> = ({\n  game,\n}: IProps): ReactElement => {\n  const [scoreboardMinHeight, setScoreboardMinHeight] = useState('0');\n  const bodyColumnRef: MutableRefObject<HTMLDivElement | null> = useRef(null); // tslint:disable-line: no-null-keyword\n  const headRef: MutableRefObject<HTMLDivElement | null> = useRef(null); // tslint:disable-line: no-null-keyword\n  const footRef: MutableRefObject<HTMLDivElement | null> = useRef(null); // tslint:disable-line: no-null-keyword\n  const footCellRef: MutableRefObject<HTMLDivElement | null> = useRef(null); // tslint:disable-line: no-null-keyword\n\n  useEffect(() => {\n    const { current } = bodyColumnRef;\n    if (current === null) return undefined;\n\n    current.scrollIntoView({ behavior: 'smooth', block: 'end' });\n  });\n\n  useLayoutEffect(() => {\n    const { current: currentHeadRef } = headRef;\n    const { current: currentFootRef } = footRef;\n    const { current: currentCellRef } = footCellRef;\n    if (\n      currentHeadRef === null ||\n      currentFootRef === null ||\n      currentCellRef === null\n    ) {\n      return undefined;\n    }\n\n    const newScoreboardMinHeight: string = `${currentHeadRef.offsetHeight +\n      currentFootRef.offsetHeight +\n      currentCellRef.offsetHeight}px`;\n    setScoreboardMinHeight(newScoreboardMinHeight);\n  }, []);\n\n  return (\n    <Table scoreboardMinHeight={scoreboardMinHeight}>\n      <Head ref={headRef}>\n        {game.teams.map((team: Team) => (\n          <Column key={team}>\n            <Cell reverse={team === last(game.teams)}>\n              {game.leader === team ? (\n                <>\n                  <Content>{team}</Content>\n                  <Emoji>🏁</Emoji>\n                </>\n              ) : (\n                <Content>{team}</Content>\n              )}\n            </Cell>\n          </Column>\n        ))}\n      </Head>\n\n      <Body>\n        {game.teams.map((team: Team, teamIndex: number) => (\n          <Column key={team} ref={bodyColumnRef}>\n            {game.sets.map((set: ISet) => (\n              <Cell key={set.round}>\n                {!set.score && set.bid.team === team && (\n                  <Content>({set.bid.points})</Content>\n                )}\n\n                {set.score && <Content>{set.score[teamIndex].points}</Content>}\n              </Cell>\n            ))}\n          </Column>\n        ))}\n      </Body>\n\n      <Foot ref={footRef}>\n        {game.score.map((score: IResult) => (\n          <Column key={score.team}>\n            <Cell ref={footCellRef} reverse={score.team === last(game.teams)}>\n              {game.winner !== undefined && game.winner.team === score.team ? (\n                <>\n                  <Content>{score.points}</Content>\n                  <Emoji>🏆</Emoji>\n                </>\n              ) : (\n                <Content>{score.points}</Content>\n              )}\n            </Cell>\n          </Column>\n        ))}\n      </Foot>\n    </Table>\n  );\n};\n","import styled, { StyledComponent } from 'styled-components';\nimport { CHALK_WHITE } from '../../constants/colors';\nimport { IAnswer, IIconWrapper } from './types';\n\nexport const Answer: StyledComponent<'span', {}, IAnswer> = styled.span`\n  color: ${(props: IAnswer): string => props.color};\n  font-weight: bold;\n  text-transform: uppercase;\n  padding: 0.5rem;\n`;\n\nexport const ChoiceContainer: StyledComponent<'div', {}> = styled.div`\n  display: flex;\n  justify-content: space-around;\n`;\n\nexport const Confirmation: StyledComponent<'div', {}> = styled.div`\n  background-color: white;\n  border-radius: 0.5rem;\n  padding: 1rem;\n`;\n\nexport const Container: StyledComponent<'div', {}> = styled.div`\n  display: flex;\n  font-size: 1.5rem;\n  grid-area: toolbar;\n  justify-content: space-between;\n`;\n\nexport const H4: StyledComponent<'h4', {}> = styled.h4`\n  margin-top: 0;\n  text-align: center;\n`;\n\nexport const IconWrapper: StyledComponent<\n  'span',\n  {},\n  IIconWrapper\n> = styled.span`\n  align-items: center;\n  color: ${(props: IIconWrapper): string =>\n    props.disabled ? 'gray' : CHALK_WHITE};\n  display: flex;\n  padding: 0.5rem;\n  pointer-events: ${(props: IIconWrapper): string =>\n    props.disabled ? 'none' : 'auto'};\n`;\n","import React, { FunctionComponent, ReactElement, useState } from 'react';\nimport { MdRedo, MdReplay, MdUndo } from 'react-icons/md';\nimport Popover, {\n  ArrowContainer,\n  ContentRendererArgs,\n} from 'react-tiny-popover';\nimport {\n  DECK_BLUE,\n  DECK_RED,\n  PLAYING_CARD_WHITE,\n} from '../../constants/colors';\nimport {\n  Answer,\n  ChoiceContainer,\n  Confirmation,\n  Container,\n  H4,\n  IconWrapper,\n} from './styles';\nimport { IProps } from './types';\n\nexport const Toolbar: FunctionComponent<IProps> = ({\n  canRedo,\n  canResetScore,\n  canUndo,\n  redo,\n  resetScore,\n  undo,\n}: IProps): ReactElement => {\n  const [popoverOpen, setPopoverOpen] = useState(false);\n\n  const openPopover: () => void = (): void => {\n    setPopoverOpen(true);\n  };\n\n  const closePopover: () => void = (): void => {\n    setPopoverOpen(false);\n  };\n\n  const replay: () => void = (): void => {\n    closePopover();\n    resetScore();\n  };\n\n  return (\n    <Container>\n      <IconWrapper disabled={!canUndo}>\n        <MdUndo onClick={undo} />\n      </IconWrapper>\n\n      <Popover\n        content={(\n          { position, targetRect, popoverRect }: ContentRendererArgs, // tslint:disable-line: jsx-no-lambda\n        ): JSX.Element => (\n          <ArrowContainer\n            arrowColor={PLAYING_CARD_WHITE}\n            popoverRect={popoverRect}\n            position={position}\n            targetRect={targetRect}\n          >\n            <Confirmation>\n              <H4>Vill du byri nyi spel?</H4>\n              <ChoiceContainer>\n                <Answer color={DECK_BLUE} onClick={replay}>\n                  Jepp\n                </Answer>\n                <Answer color={DECK_RED} onClick={closePopover}>\n                  Nepp\n                </Answer>\n              </ChoiceContainer>\n            </Confirmation>\n          </ArrowContainer>\n        )}\n        isOpen={popoverOpen}\n        onClickOutside={closePopover}\n        padding={0}\n      >\n        <IconWrapper disabled={!canResetScore} onClick={openPopover}>\n          <MdReplay />\n        </IconWrapper>\n      </Popover>\n\n      <IconWrapper disabled={!canRedo}>\n        <MdRedo onClick={redo} />\n      </IconWrapper>\n    </Container>\n  );\n};\n","import styled, {\n  createGlobalStyle,\n  DefaultTheme,\n  GlobalStyleComponent,\n  StyledComponent,\n} from 'styled-components';\nimport { FELT_GREEN } from '../../constants/colors';\n\nconst SPACING: number = 1;\n\nexport const Felt: StyledComponent<'div', {}> = styled.div`\n  background-color: ${FELT_GREEN};\n  box-shadow: inset 0 0 10rem black;\n  display: grid;\n  height: calc(100vh - ${SPACING + SPACING}rem);\n  padding: ${SPACING}rem;\n`;\n\nexport const Grid: StyledComponent<'div', {}> = styled.div`\n  display: grid;\n  grid-template: 1fr repeat(2, auto) / 1fr;\n  grid-template-areas:\n    'scoreboard'\n    'toolbar'\n    'keypad';\n  overflow: auto;\n\n  @media screen and (orientation: landscape) {\n    column-gap: ${SPACING}rem;\n    grid-template: 1fr auto / 2fr 1fr;\n    grid-template-areas:\n      'scoreboard keypad'\n      'scoreboard toolbar';\n  }\n`;\n\nexport const GlobalStyle: GlobalStyleComponent<\n  {},\n  DefaultTheme\n> = createGlobalStyle`\n  * {\n    font-family: 'Roboto', sans-serif;\n    }\n  \n  body {\n    background-color: #000;\n    overscroll-behavior: contain;\n    user-select: none;\n    -webkit-tap-highlight-color: transparent;\n    -webkit-touch-callout: none;\n  }\n`;\n","import last from 'lodash.last';\nimport React, {\n  FunctionComponent,\n  ReactElement,\n  useEffect,\n  useState,\n} from 'react';\nimport { MAXIMUM_POINTS, WINNING_POINTS } from '../../constants/game';\nimport { ITEMS } from '../../constants/session-storage';\nimport { Keypad } from '../keypad';\nimport { Scoreboard } from '../scoreboard';\nimport { Toolbar } from '../toolbar';\nimport { Felt, GlobalStyle, Grid } from './styles';\nimport { IGame, IResult, ISet, Phases, Score, Team } from './types';\n\nconst INITIAL_GAME: () => IGame = (): IGame => {\n  const teams: Team[] = ['vi', 'de'];\n  const initialScore: Score = teams.map((team: Team) => ({ points: 0, team }));\n\n  return { phase: Phases.Bidding, score: initialScore, sets: [], teams };\n};\nconst INITIAL_GAME_HISTORY_INDEX: number = 0;\n\nconst initializeFromSessionStorage: (\n  item: string,\n  fallback: unknown,\n) => unknown = (item: string, fallback: unknown): unknown => {\n  const storedItem: string | null = sessionStorage.getItem(item);\n  if (storedItem !== null) {\n    return JSON.parse(storedItem);\n  }\n\n  return fallback;\n};\n\nexport const App: FunctionComponent = (): ReactElement => {\n  const [game, setGame] = useState(initializeFromSessionStorage(\n    ITEMS.GAME,\n    INITIAL_GAME(),\n  ) as IGame);\n\n  const [gameHistory, setGameHistory] = useState(initializeFromSessionStorage(\n    ITEMS.GAME_HISTORY,\n    [INITIAL_GAME()],\n  ) as IGame[]);\n  const [gameHistoryIndex, setGameHistoryIndex] = useState(\n    initializeFromSessionStorage(\n      ITEMS.GAME_HISTORY_INDEX,\n      INITIAL_GAME_HISTORY_INDEX,\n    ) as number,\n  );\n\n  useEffect(() => {\n    sessionStorage.setItem(ITEMS.GAME, JSON.stringify(game));\n  }, [game]);\n\n  useEffect(() => {\n    sessionStorage.setItem(ITEMS.GAME_HISTORY, JSON.stringify(gameHistory));\n  }, [gameHistory]);\n  useEffect(() => {\n    sessionStorage.setItem(\n      ITEMS.GAME_HISTORY_INDEX,\n      JSON.stringify(gameHistoryIndex),\n    );\n  }, [gameHistoryIndex]);\n\n  const getNextPhase: () => Phases = (): Phases =>\n    game.phase === Phases.Bidding ? Phases.Score : Phases.Bidding;\n\n  const updateGameHistory: (updatedGame: IGame) => void = (\n    updatedGame: IGame,\n  ): void => {\n    const nextGameHistoryIndex: number = gameHistoryIndex + 1;\n    setGameHistory([\n      ...gameHistory.slice(0, nextGameHistoryIndex),\n      updatedGame,\n    ]);\n    setGameHistoryIndex(nextGameHistoryIndex);\n  };\n\n  const updateBid: (bid: IResult) => void = (bid: IResult): void => {\n    const currentSet: ISet | undefined = last(game.sets);\n    const nextRound: number = currentSet ? currentSet.round + 1 : 1;\n\n    const updatedGame: IGame = {\n      ...game,\n      phase: getNextPhase(),\n      sets: [...game.sets, { bid, round: nextRound }],\n    };\n\n    setGame(updatedGame);\n    updateGameHistory(updatedGame);\n  };\n\n  const updateScore: (setWinner: IResult) => void = (\n    setWinner: IResult,\n  ): void => {\n    const currentSet: ISet | undefined = last(game.sets);\n    if (!currentSet) return;\n    const { bid } = currentSet;\n    const { points: biddingPoints, team: biddingTeam } = bid;\n\n    const setScore: Score = game.teams.map((team: Team) => {\n      let points: number =\n        team === setWinner.team\n          ? setWinner.points\n          : MAXIMUM_POINTS - setWinner.points;\n\n      if (team === biddingTeam && points < biddingPoints) {\n        points = -biddingPoints;\n      }\n\n      return { points, team };\n    });\n\n    const gameScore: Score = game.teams.map((team: Team, index: number) => ({\n      points: game.score[index].points + setScore[index].points,\n      team,\n    }));\n\n    let winner: IResult | undefined = gameScore.find(\n      (teamScore: IResult) =>\n        teamScore.team === bid.team && teamScore.points >= WINNING_POINTS,\n    );\n    if (!winner) {\n      winner = gameScore.find(\n        (teamScore: IResult) => teamScore.points >= WINNING_POINTS,\n      );\n    }\n\n    let leader: Team | undefined;\n    if (!winner) {\n      const [ourScore, theirScore] = gameScore;\n\n      if (ourScore.points > theirScore.points) leader = ourScore.team;\n      if (theirScore.points > ourScore.points) leader = theirScore.team;\n    }\n\n    const updatedGame: IGame = {\n      ...game,\n      leader,\n      phase: getNextPhase(),\n      score: gameScore,\n      sets: [...game.sets.slice(0, -1), { ...currentSet, score: setScore }],\n      winner,\n    };\n\n    setGame(updatedGame);\n    updateGameHistory(updatedGame);\n  };\n\n  const undo: () => void = (): void => {\n    const nextGameHistoryIndex: number = gameHistoryIndex - 1;\n    setGame(gameHistory[nextGameHistoryIndex]);\n    setGameHistoryIndex(nextGameHistoryIndex);\n  };\n\n  const redo: () => void = (): void => {\n    const nextGameHistoryIndex: number = gameHistoryIndex + 1;\n    setGame(gameHistory[nextGameHistoryIndex]);\n    setGameHistoryIndex(nextGameHistoryIndex);\n  };\n\n  const resetScore: () => void = (): void => {\n    setGame(INITIAL_GAME());\n    setGameHistory([INITIAL_GAME()]);\n    setGameHistoryIndex(INITIAL_GAME_HISTORY_INDEX);\n  };\n\n  const canUndo: boolean = gameHistoryIndex > 0;\n  const canRedo: boolean = gameHistoryIndex < gameHistory.length - 1;\n  const canResetScore: boolean = gameHistory.length > 1;\n\n  const updateSet: (result: IResult) => void =\n    game.phase === Phases.Bidding ? updateBid : updateScore;\n\n  return (\n    <>\n      <GlobalStyle />\n      <Felt>\n        <Grid>\n          <Scoreboard game={game} />\n          <Toolbar\n            canRedo={canRedo}\n            canResetScore={canResetScore}\n            canUndo={canUndo}\n            redo={redo}\n            resetScore={resetScore}\n            undo={undo}\n          />\n          {!game.winner && (\n            <Keypad\n              phase={game.phase}\n              teams={game.teams}\n              updateSet={updateSet}\n            />\n          )}\n        </Grid>\n      </Felt>\n    </>\n  );\n};\n","/* tslint:disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import 'normalize.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-roboto';\nimport { App } from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement: HTMLElement | null = document.getElementById('root');\n\nReactDOM.render(<App />, rootElement);\n\nif (module.hot) {\n  module.hot.accept('./components/app', async () => {\n    const { App: NextApp } = await import('./components/app');\n    ReactDOM.render(<NextApp />, rootElement);\n  });\n}\n\n/*\nIf you want your app to work offline and load faster, you can change\nunregister() to register() below. Note this comes with some pitfalls.\nLearn more about service workers: http://bit.ly/CRA-PWA\n*/\nserviceWorker.register();\n"],"sourceRoot":""}