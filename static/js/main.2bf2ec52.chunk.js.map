{"version":3,"sources":["components/keypad/styles.tsx","constants/colors.ts","components/keypad/keypad.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["Button","styled","button","_templateObject","props","theme","color","defaultProps","H1","h1","_templateObject2","PointWrapper","div","_templateObject3","TeamWrapper","_templateObject4","Keypad","_useState","useState","Array","from","keys","map","point","points","Object","slicedToArray","react_default","a","createElement","Fragment","key","GlobalStyle","createGlobalStyle","app_templateObject","Felt","app_templateObject2","Boolean","window","location","hostname","match","rootElement","document","getElementById","ReactDOM","render","keypad_Keypad","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s9BAGO,IAAMA,EAAwCC,IAAOC,OAAVC,IAUrC,SAACC,GAAD,OACPA,EAAMC,MAAMC,QAKlBN,EAAOO,aAAe,CAAEF,MAAO,CAAEC,MCjBO,YDmBjC,IAAME,EAAgCP,IAAOQ,GAAVC,KAK7BC,EAA2CV,IAAOW,IAAVC,KAOxCC,EAA0Cb,IAAOW,IAAVG,KE7BvCC,EAA4B,WAAoB,IAAAC,EAC1CC,mBAAS,WAIxB,OAAOC,MAAMC,KAAKD,MAHG,GAGSE,QAAQC,IACpC,SAACC,GAAD,OAAmBA,EAHG,MAFnBC,EADoDC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,MAU3D,OACEU,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACrB,EAAD,yBAEAmB,EAAAC,EAAAC,cAACf,EAAD,KACEa,EAAAC,EAAAC,cAAC7B,EAAD,CAAQK,MAAO,CAAEC,MDlBiB,UCkBlC,MACAqB,EAAAC,EAAAC,cAAC7B,EAAD,CAAQK,MAAO,CAAEC,MDnBiB,UCmBlC,OAGFqB,EAAAC,EAAAC,cAAClB,EAAD,KACGa,EAAOF,IAAI,SAACC,GAAD,OACVI,EAAAC,EAAAC,cAAC7B,EAAD,CAAQ+B,IAAKR,GAAQA,qVCf/B,IAAMS,EAAsDC,YAAHC,KAQnDC,EAAmClC,IAAOW,IAAVwB,IFlBJ,WGadC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAkCC,SAASC,eAAe,QAEhEC,IAASC,OAAOnB,EAAAC,EAAAC,cFiBsB,kBACpCF,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACG,EAAD,MACAL,EAAAC,EAAAC,cAACM,EAAD,KACER,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAACkB,EAAD,SEtBU,MAASL,GDiInB,kBAAmBM,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAACC,GAClCA,EAAaC","file":"static/js/main.2bf2ec52.chunk.js","sourcesContent":["import styled, { StyledComponent, ThemedStyledProps } from 'styled-components';\nimport { PLAYING_CARD_RED } from '../../constants/colors';\n\nexport const Button: StyledComponent<'button', {}> = styled.button`\n  background-color: transparent;\n  border: 5px solid white;\n  border-radius: 10px;\n  color: white;\n  font: normal 1.5rem 'Roboto', sans-serif;\n  padding: 0.5rem;\n\n  &:focus {\n    background-color: white;\n    color: ${(props: ThemedStyledProps<{}, { color: string }>): string =>\n      props.theme.color};\n    font-weight: bold;\n    outline: none;\n  }\n`;\nButton.defaultProps = { theme: { color: PLAYING_CARD_RED } };\n\nexport const H1: StyledComponent<'h1', {}> = styled.h1`\n  color: white;\n  text-align: center;\n`;\n\nexport const PointWrapper: StyledComponent<'div', {}> = styled.div`\n  display: grid;\n  grid-gap: 1px;\n  grid-template-columns: 1fr 1fr 1fr;\n  padding: 1px;\n`;\n\nexport const TeamWrapper: StyledComponent<'div', {}> = styled.div`\n  display: grid;\n  grid-gap: 1px;\n  grid-template-columns: 1fr 1fr;\n`;\n","export const FELT_GREEN: string = '#006e3b';\nexport const PLAYING_CARD_BLACK: string = 'black';\nexport const PLAYING_CARD_RED: string = '#e10030';\n","import React, { FunctionComponent, ReactElement, useState } from 'react';\nimport { PLAYING_CARD_BLACK } from '../../constants/colors';\nimport { Button, H1, PointWrapper, TeamWrapper } from './styles';\n\nexport const Keypad: FunctionComponent = (): ReactElement => {\n  const [points] = useState(() => {\n    const size: number = 9;\n    const minimum: number = 6;\n\n    return Array.from(Array(size).keys()).map(\n      (point: number) => point + minimum,\n    );\n  });\n\n  return (\n    <>\n      <H1>Vem bj√∂ud va?</H1>\n\n      <TeamWrapper>\n        <Button theme={{ color: PLAYING_CARD_BLACK }}>Vi</Button>\n        <Button theme={{ color: PLAYING_CARD_BLACK }}>De</Button>\n      </TeamWrapper>\n\n      <PointWrapper>\n        {points.map((point: number) => (\n          <Button key={point}>{point}</Button>\n        ))}\n      </PointWrapper>\n    </>\n  );\n};\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport styled, {\n  createGlobalStyle,\n  DefaultTheme,\n  GlobalStyleComponent,\n  StyledComponent,\n} from 'styled-components';\nimport { Keypad } from './components/keypad/keypad';\nimport { FELT_GREEN } from './constants/colors';\n\nconst GlobalStyle: GlobalStyleComponent<{}, DefaultTheme> = createGlobalStyle`\n  html,\n  body,\n  #root {\n    height: 100%;\n    }\n`;\n\nconst Felt: StyledComponent<'div', {}> = styled.div`\n  background-color: ${FELT_GREEN};\n  box-shadow: inset 0 0 10rem black;\n  display: grid;\n  grid-template-rows: 1fr auto;\n  min-height: 100%;\n`;\n\nexport const App: FunctionComponent = (): ReactElement => (\n  <>\n    <GlobalStyle />\n    <Felt>\n      <div />\n      <Keypad />\n    </Felt>\n  </>\n);\n","/* tslint:disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import 'normalize.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-roboto';\nimport { App } from './app';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement: HTMLElement | null = document.getElementById('root');\n\nReactDOM.render(<App />, rootElement);\n\nif (module.hot) {\n  module.hot.accept('./app', async () => {\n    const { App: NextApp } = await import('./app');\n    ReactDOM.render(<NextApp />, rootElement);\n  });\n}\n\n/*\nIf you want your app to work offline and load faster, you can change\nunregister() to register() below. Note this comes with some pitfalls.\nLearn more about service workers: http://bit.ly/CRA-PWA\n*/\nserviceWorker.unregister();\n"],"sourceRoot":""}