{"version":3,"sources":["constants/session-storage.ts","components/keypad/styles.ts","constants/colors.ts","components/keypad/keypad.tsx","constants/game.ts","components/scoreboard/styles.ts","components/scoreboard/scoreboard.tsx","components/toolbar/styles.ts","components/toolbar/toolbar.tsx","components/app/styles.ts","components/app/types.ts","components/app/app.tsx","serviceWorker.ts","index.tsx"],"names":["ITEMS","h2","styled","_templateObject","Button","button","_templateObject2","props","active","activeColor","DigitContainer","div","_templateObject3","Container","_templateObject4","H2","Prompt","_templateObject5","minWidth","TeamContainer","_templateObject6","PROMPTS","BIDDING","SCORE","Keypad","_ref","phase","teams","updateSet","winner","_useState","useState","range","MAXIMUM_POINTS","digits","Object","slicedToArray","_useState3","undefined","_useState4","selectedTeam","setSelectedTeam","_useState5","_useState6","selectedDigit","setSelectedDigit","_useState7","_useState8","promptMinWidth","setPromptMinWidth","useEffect","points","team","maxPromptCharacters","Math","max","apply","toConsumableArray","values","map","prompt","replace","length","concat","handleTeamClick","event","newSelectedTeam","currentTarget","textContent","handleDigitClick","newSelectedDigit","Number","react_default","a","createElement","Fragment","key","onClick","digit","row","styles_templateObject","Body","styles_templateObject2","Cell","styles_templateObject3","reverse","Column","styles_templateObject4","Content","styles_templateObject5","Emoji","span","styles_templateObject6","Foot","_templateObject7","Head","_templateObject8","Table","_templateObject9","scoreboardMinHeight","Scoreboard","game","_useState2","setScoreboardMinHeight","bodyColumnRef","useRef","headRef","footRef","footCellRef","current","scrollIntoView","behavior","block","useLayoutEffect","currentHeadRef","currentFootRef","currentCellRef","newScoreboardMinHeight","offsetHeight","ref","last","leader","teamIndex","sets","set","round","score","bid","Answer","toolbar_styles_templateObject","color","ChoiceContainer","toolbar_styles_templateObject2","Confirmation","toolbar_styles_templateObject3","toolbar_styles_templateObject4","H4","h4","toolbar_styles_templateObject5","IconWrapper","toolbar_styles_templateObject6","disabled","Toolbar","canRedo","canResetScore","canUndo","redo","resetScore","undo","popoverOpen","setPopoverOpen","closePopover","replay","styles_Container","md","dist_default","content","_ref2","position","targetRect","popoverRect","dist","arrowColor","isOpen","onClickOutside","padding","Phases","Felt","app_styles_templateObject","SPACING","Grid","app_styles_templateObject2","GlobalStyle","createGlobalStyle","app_styles_templateObject3","INITIAL_GAME","initialScore","Bidding","initializeFromSessionStorage","item","fallback","storedItem","sessionStorage","getItem","JSON","parse","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","rootElement","document","getElementById","ReactDOM","render","setGame","gameHistory","setGameHistory","gameHistoryIndex","setGameHistoryIndex","setItem","stringify","getNextPhase","Score","updateGameHistory","updatedGame","nextGameHistoryIndex","slice","currentSet","nextRound","objectSpread","setWinner","biddingPoints","biddingTeam","setScore","gameScore","index","find","teamScore","_gameScore","ourScore","theirScore","scoreboard_Scoreboard","toolbar_Toolbar","keypad_Keypad","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.98d2ad9b.chunk.js","sourcesContent":["export const ITEMS: { [key: string]: string } = {\n  GAME: 'game',\n  GAME_HISTORY: 'gameHistory',\n  GAME_HISTORY_INDEX: 'gameHistoryIndex',\n};\n","import styled, { StyledComponent } from 'styled-components';\nimport { PLAYING_CARD_WHITE } from '../../constants/colors';\nimport { IButton, IPrompt } from './types';\n\nconst BUTTON_GAP: number = 0.1;\n\nconst h2: StyledComponent<'h2', {}> = styled.h2`\n  color: ${PLAYING_CARD_WHITE};\n  text-align: center;\n`;\n\nexport const Button: StyledComponent<'button', {}, IButton> = styled.button`\n  background-color: ${(props: IButton): string =>\n    props.active ? PLAYING_CARD_WHITE : 'transparent'};\n  border: 0.25rem solid ${PLAYING_CARD_WHITE};\n  border-radius: 0.5rem;\n  color: ${(props: IButton): string =>\n    props.active ? props.activeColor : PLAYING_CARD_WHITE};\n  font-size: 1.5rem;\n  font-weight: bold;\n  padding: 0.5rem;\n  text-transform: uppercase;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const DigitContainer: StyledComponent<'div', {}> = styled.div`\n  display: grid;\n  grid-gap: ${BUTTON_GAP}rem;\n  grid-template-columns: repeat(3, 1fr);\n`;\n\nexport const Container: StyledComponent<'div', {}> = styled.div`\n  align-content: center;\n  display: grid;\n  grid-area: keypad;\n  min-width: max-content;\n`;\n\nexport const H2: StyledComponent<'h2', {}> = h2;\n\nexport const Prompt: StyledComponent<'h2', {}, IPrompt> = styled(h2)`\n  margin-bottom: 0.5rem;\n  margin-top: 0;\n  min-width: ${(props: IPrompt): string => props.minWidth};\n`;\n\nexport const TeamContainer: StyledComponent<'div', {}> = styled.div`\n  column-gap: ${BUTTON_GAP}rem;\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  margin-bottom: ${BUTTON_GAP}rem;\n`;\n","export const BLACK_BOARD: string = '#282828';\nexport const CHALK_WHITE: string = '#fefeff';\nexport const DECK_BLUE: string = '#12257d';\nexport const DECK_RED: string = '#ea3f42';\nexport const FELT_GREEN: string = '#006e3b';\nexport const PLAYING_CARD_BLACK: string = '#000';\nexport const PLAYING_CARD_RED: string = '#ff534f';\nexport const PLAYING_CARD_WHITE: string = '#fff';\n","import range from 'lodash.range';\nimport React, {\n  FunctionComponent,\n  ReactElement,\n  useEffect,\n  useState,\n} from 'react';\nimport { PLAYING_CARD_BLACK, PLAYING_CARD_RED } from '../../constants/colors';\nimport { MAXIMUM_POINTS, MINIMUM_POINTS } from '../../constants/game';\nimport { Phases, Team } from '../app/types';\nimport {\n  Button,\n  Container,\n  DigitContainer,\n  H2,\n  Prompt,\n  TeamContainer,\n} from './styles';\nimport { IProps } from './types';\n\nconst PROMPTS: { [key in Phases]: string } = {\n  BIDDING: 'Vem bjöud?',\n  SCORE: 'Vem fick högst poäng?',\n};\n\nexport const Keypad: FunctionComponent<IProps> = ({\n  phase,\n  teams,\n  updateSet,\n  winner,\n}: IProps): ReactElement => {\n  const [digits] = useState(range(MINIMUM_POINTS, MAXIMUM_POINTS + 1));\n  const [selectedTeam, setSelectedTeam] = useState<Team | undefined>(undefined);\n  const [selectedDigit, setSelectedDigit] = useState<number | undefined>(\n    undefined,\n  );\n  const [promptMinWidth, setPromptMinWidth] = useState('0');\n\n  useEffect(() => {\n    if (selectedTeam === undefined || selectedDigit === undefined) {\n      return undefined;\n    }\n\n    updateSet({ points: selectedDigit, team: selectedTeam });\n    setSelectedTeam(undefined);\n    setSelectedDigit(undefined);\n  }, [selectedTeam, selectedDigit]);\n\n  useEffect(() => {\n    const maxPromptCharacters: number = Math.max(\n      ...Object.values(PROMPTS).map(\n        (prompt: string) => prompt.replace(/\\s/g, '').length,\n      ),\n    );\n    setPromptMinWidth(`${maxPromptCharacters}ch`);\n  }, []);\n\n  const handleTeamClick: (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => void = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    const newSelectedTeam: Team = event.currentTarget.textContent as Team;\n\n    setSelectedTeam(newSelectedTeam);\n  };\n\n  const handleDigitClick: (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => void = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    const { textContent } = event.currentTarget;\n    const newSelectedDigit: number = Number(textContent);\n\n    setSelectedDigit(newSelectedDigit);\n  };\n\n  return (\n    <Container>\n      {winner ? (\n        <H2>{winner.team} vann!</H2>\n      ) : (\n        <>\n          <Prompt minWidth={promptMinWidth}>{PROMPTS[phase]}</Prompt>\n\n          <TeamContainer>\n            {teams.map((team: Team) => (\n              <Button\n                active={team === selectedTeam}\n                activeColor={PLAYING_CARD_BLACK}\n                key={team}\n                onClick={handleTeamClick}\n              >\n                {team}\n              </Button>\n            ))}\n          </TeamContainer>\n\n          <DigitContainer>\n            {digits.map((digit: number) => (\n              <Button\n                active={digit === selectedDigit}\n                activeColor={PLAYING_CARD_RED}\n                key={digit}\n                onClick={handleDigitClick}\n              >\n                {digit}\n              </Button>\n            ))}\n          </DigitContainer>\n        </>\n      )}\n    </Container>\n  );\n};\n","export const MAXIMUM_POINTS: number = 14;\nexport const MINIMUM_POINTS: number = 6;\nexport const WINNING_POINTS: number = 62;\n","import styled, { StyledComponent } from 'styled-components';\nimport { BLACK_BOARD, CHALK_WHITE } from '../../constants/colors';\nimport { ICell, ITable } from './types';\n\nconst row: StyledComponent<'div', {}> = styled.div`\n  column-gap: 0.1rem;\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n`;\n\nexport const Body: StyledComponent<'div', {}> = styled(row)`\n  overflow: auto;\n`;\n\nexport const Cell: StyledComponent<'div', {}, ICell> = styled.div`\n  color: ${CHALK_WHITE};\n  display: grid;\n  font-size: 1.25rem;\n  grid-column-gap: 0.25rem;\n  grid-template-areas: ${(props: ICell): string =>\n    props.reverse === true ? '\"emoji content .\"' : '\". content emoji\"'};\n  grid-template-columns: repeat(3, 1fr);\n  text-align: center;\n  padding: 0.5rem;\n  text-transform: uppercase;\n`;\n\nexport const Column: StyledComponent<'div', {}> = styled.div`\n  background-color: ${BLACK_BOARD};\n`;\n\nexport const Content: StyledComponent<'div', {}> = styled.div`\n  grid-area: content;\n`;\n\nexport const Emoji: StyledComponent<'span', {}> = styled.span`\n  grid-area: emoji;\n`;\n\nexport const Foot: StyledComponent<'div', {}> = styled(row)`\n  border-top: 0.2rem solid ${CHALK_WHITE};\n  font-weight: bold;\n`;\n\nexport const Head: StyledComponent<'div', {}> = styled(row)`\n  border-bottom: 0.2rem solid ${CHALK_WHITE};\n  font-weight: bold;\n`;\n\nexport const Table: StyledComponent<'div', {}, ITable> = styled.div`\n  background-color: ${CHALK_WHITE};\n  display: grid;\n  grid-area: scoreboard;\n  grid-template-rows: auto 1fr auto;\n  min-height: ${(props: ITable): string => props.scoreboardMinHeight};\n  min-width: max-content;\n`;\n","import last from 'lodash.last';\nimport React, {\n  FunctionComponent,\n  MutableRefObject,\n  ReactElement,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { IResult, ISet, Team } from '../app/types';\nimport {\n  Body,\n  Cell,\n  Column,\n  Content,\n  Emoji,\n  Foot,\n  Head,\n  Table,\n} from './styles';\nimport { IProps } from './types';\n\nexport const Scoreboard: FunctionComponent<IProps> = ({\n  game,\n}: IProps): ReactElement => {\n  const [scoreboardMinHeight, setScoreboardMinHeight] = useState('0');\n  const bodyColumnRef: MutableRefObject<HTMLDivElement | null> = useRef(null); // tslint:disable-line: no-null-keyword\n  const headRef: MutableRefObject<HTMLDivElement | null> = useRef(null); // tslint:disable-line: no-null-keyword\n  const footRef: MutableRefObject<HTMLDivElement | null> = useRef(null); // tslint:disable-line: no-null-keyword\n  const footCellRef: MutableRefObject<HTMLDivElement | null> = useRef(null); // tslint:disable-line: no-null-keyword\n\n  useEffect(() => {\n    const { current } = bodyColumnRef;\n    if (current === null) return undefined;\n\n    current.scrollIntoView({ behavior: 'smooth', block: 'end' });\n  });\n\n  useLayoutEffect(() => {\n    const { current: currentHeadRef } = headRef;\n    const { current: currentFootRef } = footRef;\n    const { current: currentCellRef } = footCellRef;\n    if (\n      currentHeadRef === null ||\n      currentFootRef === null ||\n      currentCellRef === null\n    ) {\n      return undefined;\n    }\n\n    const newScoreboardMinHeight: string = `${currentHeadRef.offsetHeight +\n      currentFootRef.offsetHeight +\n      currentCellRef.offsetHeight}px`;\n    setScoreboardMinHeight(newScoreboardMinHeight);\n  }, []);\n\n  return (\n    <Table scoreboardMinHeight={scoreboardMinHeight}>\n      <Head ref={headRef}>\n        {game.teams.map((team: Team) => (\n          <Column key={team}>\n            <Cell reverse={team === last(game.teams)}>\n              <Content>{team}</Content>\n              {game.leader === team && <Emoji>🏁</Emoji>}\n            </Cell>\n          </Column>\n        ))}\n      </Head>\n\n      <Body>\n        {game.teams.map((team: Team, teamIndex: number) => (\n          <Column key={team} ref={bodyColumnRef}>\n            {game.sets.map((set: ISet) => (\n              <Cell key={set.round}>\n                {!set.score && set.bid.team === team && (\n                  <Content>({set.bid.points})</Content>\n                )}\n\n                {set.score && <Content>{set.score[teamIndex].points}</Content>}\n              </Cell>\n            ))}\n          </Column>\n        ))}\n      </Body>\n\n      <Foot ref={footRef}>\n        {game.score.map((score: IResult) => (\n          <Column key={score.team}>\n            <Cell ref={footCellRef} reverse={score.team === last(game.teams)}>\n              <Content>{score.points}</Content>\n              {game.winner !== undefined && game.winner.team === score.team && (\n                <Emoji>🏆</Emoji>\n              )}\n            </Cell>\n          </Column>\n        ))}\n      </Foot>\n    </Table>\n  );\n};\n","import styled, { StyledComponent } from 'styled-components';\nimport { CHALK_WHITE } from '../../constants/colors';\nimport { IAnswer, IIconWrapper } from './types';\n\nexport const Answer: StyledComponent<'span', {}, IAnswer> = styled.span`\n  color: ${(props: IAnswer): string => props.color};\n  font-weight: bold;\n  text-transform: uppercase;\n  padding: 0.5rem;\n`;\n\nexport const ChoiceContainer: StyledComponent<'div', {}> = styled.div`\n  display: flex;\n  justify-content: space-around;\n`;\n\nexport const Confirmation: StyledComponent<'div', {}> = styled.div`\n  background-color: white;\n  border-radius: 0.5rem;\n  padding: 1rem;\n`;\n\nexport const Container: StyledComponent<'div', {}> = styled.div`\n  display: flex;\n  font-size: 1.5rem;\n  grid-area: toolbar;\n  justify-content: space-between;\n`;\n\nexport const H4: StyledComponent<'h4', {}> = styled.h4`\n  margin-top: 0;\n  text-align: center;\n`;\n\nexport const IconWrapper: StyledComponent<\n  'span',\n  {},\n  IIconWrapper\n> = styled.span`\n  align-items: center;\n  color: ${(props: IIconWrapper): string =>\n    props.disabled ? 'gray' : CHALK_WHITE};\n  display: flex;\n  padding: 0.5rem;\n  pointer-events: ${(props: IIconWrapper): string =>\n    props.disabled ? 'none' : 'auto'};\n`;\n","import React, { FunctionComponent, ReactElement, useState } from 'react';\nimport { MdRedo, MdReplay, MdUndo } from 'react-icons/md';\nimport Popover, {\n  ArrowContainer,\n  ContentRendererArgs,\n} from 'react-tiny-popover';\nimport {\n  DECK_BLUE,\n  DECK_RED,\n  PLAYING_CARD_WHITE,\n} from '../../constants/colors';\nimport {\n  Answer,\n  ChoiceContainer,\n  Confirmation,\n  Container,\n  H4,\n  IconWrapper,\n} from './styles';\nimport { IProps } from './types';\n\nexport const Toolbar: FunctionComponent<IProps> = ({\n  canRedo,\n  canResetScore,\n  canUndo,\n  redo,\n  resetScore,\n  undo,\n}: IProps): ReactElement => {\n  const [popoverOpen, setPopoverOpen] = useState(false);\n\n  const openPopover: () => void = (): void => {\n    setPopoverOpen(true);\n  };\n\n  const closePopover: () => void = (): void => {\n    setPopoverOpen(false);\n  };\n\n  const replay: () => void = (): void => {\n    closePopover();\n    resetScore();\n  };\n\n  return (\n    <Container>\n      <IconWrapper disabled={!canUndo}>\n        <MdUndo onClick={undo} />\n      </IconWrapper>\n\n      <Popover\n        content={(\n          { position, targetRect, popoverRect }: ContentRendererArgs, // tslint:disable-line: jsx-no-lambda\n        ): JSX.Element => (\n          <ArrowContainer\n            arrowColor={PLAYING_CARD_WHITE}\n            popoverRect={popoverRect}\n            position={position}\n            targetRect={targetRect}\n          >\n            <Confirmation>\n              <H4>Vill du byri nyi spel?</H4>\n              <ChoiceContainer>\n                <Answer color={DECK_BLUE} onClick={replay}>\n                  Jepp\n                </Answer>\n                <Answer color={DECK_RED} onClick={closePopover}>\n                  Nepp\n                </Answer>\n              </ChoiceContainer>\n            </Confirmation>\n          </ArrowContainer>\n        )}\n        isOpen={popoverOpen}\n        onClickOutside={closePopover}\n        padding={0}\n      >\n        <IconWrapper disabled={!canResetScore} onClick={openPopover}>\n          <MdReplay />\n        </IconWrapper>\n      </Popover>\n\n      <IconWrapper disabled={!canRedo}>\n        <MdRedo onClick={redo} />\n      </IconWrapper>\n    </Container>\n  );\n};\n","import styled, {\n  createGlobalStyle,\n  DefaultTheme,\n  GlobalStyleComponent,\n  StyledComponent,\n} from 'styled-components';\nimport { FELT_GREEN } from '../../constants/colors';\n\nconst SPACING: number = 1;\n\nexport const Felt: StyledComponent<'div', {}> = styled.div`\n  background-color: ${FELT_GREEN};\n  box-shadow: inset 0 0 10rem black;\n  display: grid;\n  height: calc(100vh - ${SPACING + SPACING}rem);\n  padding: ${SPACING}rem;\n`;\n\nexport const Grid: StyledComponent<'div', {}> = styled.div`\n  display: grid;\n  grid-template: 1fr repeat(2, auto) / 1fr;\n  grid-template-areas:\n    'scoreboard'\n    'toolbar'\n    'keypad';\n  overflow: auto;\n\n  @media screen and (orientation: landscape) {\n    column-gap: ${SPACING}rem;\n    grid-template: 1fr auto / 2fr 1fr;\n    grid-template-areas:\n      'scoreboard keypad'\n      'scoreboard toolbar';\n  }\n`;\n\nexport const GlobalStyle: GlobalStyleComponent<\n  {},\n  DefaultTheme\n> = createGlobalStyle`\n  * {\n    font-family: 'Roboto', sans-serif;\n    }\n  \n  body {\n    background-color: #000;\n    overscroll-behavior: contain;\n    user-select: none;\n    -webkit-tap-highlight-color: transparent;\n    -webkit-touch-callout: none;\n  }\n`;\n","export type Team = 'VI' | 'DE';\n\nexport enum Phases {\n  Bidding = 'BIDDING',\n  Score = 'SCORE',\n}\n\nexport interface IResult {\n  points: number;\n  team: Team;\n}\n\nexport type Score = IResult[];\n\nexport interface ISet {\n  bid: IResult;\n  round: number;\n  score?: Score;\n}\n\nexport interface IGame {\n  leader?: Team;\n  phase: Phases;\n  score: Score;\n  sets: ISet[];\n  teams: Team[];\n  winner?: IResult;\n}\n","import last from 'lodash.last';\nimport React, {\n  FunctionComponent,\n  ReactElement,\n  useEffect,\n  useState,\n} from 'react';\nimport { MAXIMUM_POINTS, WINNING_POINTS } from '../../constants/game';\nimport { ITEMS } from '../../constants/session-storage';\nimport { Keypad } from '../keypad';\nimport { Scoreboard } from '../scoreboard';\nimport { Toolbar } from '../toolbar';\nimport { Felt, GlobalStyle, Grid } from './styles';\nimport { IGame, IResult, ISet, Phases, Score, Team } from './types';\n\nconst INITIAL_GAME: () => IGame = (): IGame => {\n  const teams: Team[] = ['VI', 'DE'];\n  const initialScore: Score = teams.map((team: Team) => ({ points: 0, team }));\n\n  return { phase: Phases.Bidding, score: initialScore, sets: [], teams };\n};\nconst INITIAL_GAME_HISTORY_INDEX: number = 0;\n\nconst initializeFromSessionStorage: (\n  item: string,\n  fallback: unknown,\n) => unknown = (item: string, fallback: unknown): unknown => {\n  const storedItem: string | null = sessionStorage.getItem(item);\n  if (storedItem !== null) {\n    return JSON.parse(storedItem);\n  }\n\n  return fallback;\n};\n\nexport const App: FunctionComponent = (): ReactElement => {\n  const [game, setGame] = useState(initializeFromSessionStorage(\n    ITEMS.GAME,\n    INITIAL_GAME(),\n  ) as IGame);\n\n  const [gameHistory, setGameHistory] = useState(initializeFromSessionStorage(\n    ITEMS.GAME_HISTORY,\n    [INITIAL_GAME()],\n  ) as IGame[]);\n  const [gameHistoryIndex, setGameHistoryIndex] = useState(\n    initializeFromSessionStorage(\n      ITEMS.GAME_HISTORY_INDEX,\n      INITIAL_GAME_HISTORY_INDEX,\n    ) as number,\n  );\n\n  useEffect(() => {\n    sessionStorage.setItem(ITEMS.GAME, JSON.stringify(game));\n  }, [game]);\n\n  useEffect(() => {\n    sessionStorage.setItem(ITEMS.GAME_HISTORY, JSON.stringify(gameHistory));\n  }, [gameHistory]);\n  useEffect(() => {\n    sessionStorage.setItem(\n      ITEMS.GAME_HISTORY_INDEX,\n      JSON.stringify(gameHistoryIndex),\n    );\n  }, [gameHistoryIndex]);\n\n  const getNextPhase: () => Phases = (): Phases =>\n    game.phase === Phases.Bidding ? Phases.Score : Phases.Bidding;\n\n  const updateGameHistory: (updatedGame: IGame) => void = (\n    updatedGame: IGame,\n  ): void => {\n    const nextGameHistoryIndex: number = gameHistoryIndex + 1;\n    setGameHistory([\n      ...gameHistory.slice(0, nextGameHistoryIndex),\n      updatedGame,\n    ]);\n    setGameHistoryIndex(nextGameHistoryIndex);\n  };\n\n  const updateBid: (bid: IResult) => void = (bid: IResult): void => {\n    const currentSet: ISet | undefined = last(game.sets);\n    const nextRound: number = currentSet ? currentSet.round + 1 : 1;\n\n    const updatedGame: IGame = {\n      ...game,\n      phase: getNextPhase(),\n      sets: [...game.sets, { bid, round: nextRound }],\n    };\n\n    setGame(updatedGame);\n    updateGameHistory(updatedGame);\n  };\n\n  const updateScore: (setWinner: IResult) => void = (\n    setWinner: IResult,\n  ): void => {\n    const currentSet: ISet | undefined = last(game.sets);\n    if (!currentSet) return;\n    const { bid } = currentSet;\n    const { points: biddingPoints, team: biddingTeam } = bid;\n\n    const setScore: Score = game.teams.map((team: Team) => {\n      let points: number =\n        team === setWinner.team\n          ? setWinner.points\n          : MAXIMUM_POINTS - setWinner.points;\n\n      if (team === biddingTeam && points < biddingPoints) {\n        points = -biddingPoints;\n      }\n\n      return { points, team };\n    });\n\n    const gameScore: Score = game.teams.map((team: Team, index: number) => ({\n      points: game.score[index].points + setScore[index].points,\n      team,\n    }));\n\n    let winner: IResult | undefined = gameScore.find(\n      (teamScore: IResult) =>\n        teamScore.team === bid.team && teamScore.points >= WINNING_POINTS,\n    );\n    if (!winner) {\n      winner = gameScore.find(\n        (teamScore: IResult) => teamScore.points >= WINNING_POINTS,\n      );\n    }\n\n    let leader: Team | undefined;\n    if (!winner) {\n      const [ourScore, theirScore] = gameScore;\n\n      if (ourScore.points > theirScore.points) leader = ourScore.team;\n      if (theirScore.points > ourScore.points) leader = theirScore.team;\n    }\n\n    const updatedGame: IGame = {\n      ...game,\n      leader,\n      phase: getNextPhase(),\n      score: gameScore,\n      sets: [...game.sets.slice(0, -1), { ...currentSet, score: setScore }],\n      winner,\n    };\n\n    setGame(updatedGame);\n    updateGameHistory(updatedGame);\n  };\n\n  const undo: () => void = (): void => {\n    const nextGameHistoryIndex: number = gameHistoryIndex - 1;\n    setGame(gameHistory[nextGameHistoryIndex]);\n    setGameHistoryIndex(nextGameHistoryIndex);\n  };\n\n  const redo: () => void = (): void => {\n    const nextGameHistoryIndex: number = gameHistoryIndex + 1;\n    setGame(gameHistory[nextGameHistoryIndex]);\n    setGameHistoryIndex(nextGameHistoryIndex);\n  };\n\n  const resetScore: () => void = (): void => {\n    setGame(INITIAL_GAME());\n    setGameHistory([INITIAL_GAME()]);\n    setGameHistoryIndex(INITIAL_GAME_HISTORY_INDEX);\n  };\n\n  const canUndo: boolean = gameHistoryIndex > 0;\n  const canRedo: boolean = gameHistoryIndex < gameHistory.length - 1;\n  const canResetScore: boolean = gameHistory.length > 1;\n\n  const updateSet: (result: IResult) => void =\n    game.phase === Phases.Bidding ? updateBid : updateScore;\n\n  return (\n    <>\n      <GlobalStyle />\n      <Felt>\n        <Grid>\n          <Scoreboard game={game} />\n          <Toolbar\n            canRedo={canRedo}\n            canResetScore={canResetScore}\n            canUndo={canUndo}\n            redo={redo}\n            resetScore={resetScore}\n            undo={undo}\n          />\n          <Keypad\n            phase={game.phase}\n            teams={game.teams}\n            updateSet={updateSet}\n            winner={game.winner}\n          />\n        </Grid>\n      </Felt>\n    </>\n  );\n};\n","/* tslint:disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import 'normalize.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-roboto';\nimport { App } from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement: HTMLElement | null = document.getElementById('root');\n\nReactDOM.render(<App />, rootElement);\n\nif (module.hot) {\n  module.hot.accept('./components/app', async () => {\n    const { App: NextApp } = await import('./components/app');\n    ReactDOM.render(<NextApp />, rootElement);\n  });\n}\n\n/*\nIf you want your app to work offline and load faster, you can change\nunregister() to register() below. Note this comes with some pitfalls.\nLearn more about service workers: http://bit.ly/CRA-PWA\n*/\nserviceWorker.register();\n"],"sourceRoot":""}