{"version":3,"sources":["components/app/types.ts","components/keypad/styles.tsx","components/keypad/keypad.tsx","constants/game.ts","constants/colors.ts","components/scoreboard/styles.tsx","components/scoreboard/scoreboard.tsx","components/app/styles.ts","serviceWorker.ts","index.tsx","components/app/app.tsx"],"names":["Phases","Button","styled","button","_templateObject","props","active","activeColor","Container","div","_templateObject2","DigitWrapper","_templateObject3","H2","h2","_templateObject4","TeamWrapper","_templateObject5","Keypad","_ref","phase","teams","updateSet","_useState","useState","Array","from","MAXIMUM_POINTS","keys","map","digit","digits","Object","slicedToArray","_useState3","undefined","_useState4","selectedTeam","setSelectedTeam","_useState5","_useState6","selectedDigit","setSelectedDigit","useEffect","points","team","handleTeamClick","event","newSelectedTeam","currentTarget","value","handleDigitClick","newSelectedDigit","Number","react_default","a","createElement","Bidding","key","onClick","toUpperCase","Row","styles_templateObject","Body","styles_templateObject2","Cell","styles_templateObject3","Column","styles_templateObject4","Foot","styles_templateObject5","Head","_templateObject6","Table","_templateObject7","Scoreboard","game","bodyColumnRef","useRef","current","scrollIntoView","behavior","block","length","ref","set","score","round","reduce","sum","Felt","app_styles_templateObject","SPACING","GlobalStyle","createGlobalStyle","app_styles_templateObject2","Boolean","window","location","hostname","match","rootElement","document","getElementById","ReactDOM","render","setGame","currentSet","setPhase","bid","concat","toConsumableArray","slice","objectSpread","Score","highestScore","biddingPoints","biddingTeam","result","Fragment","scoreboard_Scoreboard","keypad_Keypad","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0eceb42.chunk.js","sourcesContent":["export type Team = 'vi' | 'de';\n\nexport interface IResult {\n  points: number;\n  team: Team;\n}\n\nexport interface ISet {\n  bid?: IResult;\n  round: number;\n  score?: { [K in Team]: number };\n}\n\nexport type Game = ISet[];\n\nexport enum Phases {\n  Bidding,\n  Score,\n}\n","import styled, { StyledComponent } from 'styled-components';\nimport { IButton } from './types';\n\nconst buttonGap: number = 0.1;\n\nexport const Button: StyledComponent<'button', {}, IButton> = styled.button`\n  background-color: ${(props: IButton): string =>\n    props.active ? 'white' : 'transparent'};\n  border: 0.25rem solid white;\n  border-radius: 0.5rem;\n  color: white;\n  color: ${(props: IButton): string =>\n    props.active ? props.activeColor : 'white'};\n  font-size: 1.5rem;\n  font-weight: bold;\n  padding: 0.5rem;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const Container: StyledComponent<'div', {}> = styled.div`\n  align-content: safe center;\n  display: grid;\n  overflow: auto;\n`;\n\nexport const DigitWrapper: StyledComponent<'div', {}> = styled.div`\n  display: grid;\n  grid-gap: ${buttonGap}rem;\n  grid-template-columns: 1fr 1fr 1fr;\n`;\n\nexport const H2: StyledComponent<'h2', {}> = styled.h2`\n  color: white;\n  text-align: center;\n\n  @media screen and (orientation: landscape) {\n    margin-top: 0;\n  }\n`;\n\nexport const TeamWrapper: StyledComponent<'div', {}> = styled.div`\n  display: grid;\n  grid-gap: ${buttonGap}rem;\n  grid-template-columns: 1fr 1fr;\n  margin-bottom: ${buttonGap}rem;\n`;\n","import React, {\n  FunctionComponent,\n  ReactElement,\n  useEffect,\n  useState,\n} from 'react';\nimport { PLAYING_CARD_BLACK, PLAYING_CARD_RED } from '../../constants/colors';\nimport { MAXIMUM_POINTS, MINIMUM_POINTS } from '../../constants/game';\nimport { Phases, Team } from '../app/types';\nimport { Button, Container, DigitWrapper, H2, TeamWrapper } from './styles';\nimport { IProps } from './types';\n\nexport const Keypad: FunctionComponent<IProps> = ({\n  phase,\n  teams,\n  updateSet,\n}: IProps): ReactElement => {\n  const [digits] = useState(() =>\n    Array.from(Array(MAXIMUM_POINTS - MINIMUM_POINTS + 1).keys()).map(\n      (digit: number) => digit + MINIMUM_POINTS,\n    ),\n  );\n  const [selectedTeam, setSelectedTeam] = useState<Team | undefined>(undefined);\n  const [selectedDigit, setSelectedDigit] = useState<number | undefined>(\n    undefined,\n  );\n\n  useEffect(() => {\n    if (selectedTeam !== undefined && selectedDigit !== undefined) {\n      updateSet({ points: selectedDigit, team: selectedTeam });\n      setSelectedTeam(undefined);\n      setSelectedDigit(undefined);\n    }\n  }, [selectedTeam, selectedDigit]);\n\n  const handleTeamClick: (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => void = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    const newSelectedTeam: Team = event.currentTarget.value as Team;\n\n    if (newSelectedTeam === selectedTeam) return;\n\n    setSelectedTeam(newSelectedTeam);\n  };\n\n  const handleDigitClick: (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => void = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    const { value } = event.currentTarget;\n    const newSelectedDigit: number = Number(value);\n\n    if (newSelectedDigit === selectedDigit) return;\n\n    setSelectedDigit(newSelectedDigit);\n  };\n\n  return (\n    <Container>\n      {phase === Phases.Bidding ? (\n        <H2>Vem bjöud?</H2>\n      ) : (\n        <H2>Vem fick högst poäng?</H2>\n      )}\n\n      <TeamWrapper>\n        {teams.map((team: Team) => (\n          <Button\n            active={team === selectedTeam}\n            activeColor={PLAYING_CARD_BLACK}\n            key={team}\n            onClick={handleTeamClick}\n            value={team}\n          >\n            {team.toUpperCase()}\n          </Button>\n        ))}\n      </TeamWrapper>\n\n      <DigitWrapper>\n        {digits.map((digit: number) => (\n          <Button\n            active={digit === selectedDigit}\n            activeColor={PLAYING_CARD_RED}\n            key={digit}\n            onClick={handleDigitClick}\n            value={digit}\n          >\n            {digit}\n          </Button>\n        ))}\n      </DigitWrapper>\n    </Container>\n  );\n};\n","export const MAXIMUM_POINTS: number = 14;\nexport const MINIMUM_POINTS: number = 6;\n","export const BLACK_BOARD: string = '#282725';\nexport const CHALK_WHITE: string = '#fefeff';\nexport const FELT_GREEN: string = '#006e3b';\nexport const PLAYING_CARD_BLACK: string = 'black';\nexport const PLAYING_CARD_RED: string = '#e10030';\n","import styled, { StyledComponent } from 'styled-components';\nimport { BLACK_BOARD, CHALK_WHITE } from '../../constants/colors';\n\nconst Row: StyledComponent<'div', {}> = styled.div`\n  display: grid;\n  grid-gap: 0.1rem;\n  grid-template-columns: 1fr 1fr;\n`;\n\nexport const Body: StyledComponent<'div', {}> = styled(Row)`\n  overflow: auto;\n`;\n\nexport const Cell: StyledComponent<'div', {}> = styled.div`\n  color: ${CHALK_WHITE};\n  font-size: 1.25rem;\n  text-align: center;\n  padding: 0.5rem;\n`;\n\nexport const Column: StyledComponent<'div', {}> = styled.div`\n  background-color: ${BLACK_BOARD};\n`;\n\nexport const Foot: StyledComponent<'div', {}> = styled(Row)`\n  border-top: 0.2rem solid whitesmoke;\n  font-weight: bold;\n`;\n\nexport const Head: StyledComponent<'div', {}> = styled(Row)`\n  border-bottom: 0.2rem solid whitesmoke;\n  font-weight: bold;\n`;\n\nexport const Table: StyledComponent<'div', {}> = styled.div`\n  background-color: ${CHALK_WHITE};\n  display: grid;\n  grid-template-rows: auto minmax(0, 1fr) auto;\n  overflow: auto;\n`;\n","import React, {\n  FunctionComponent,\n  MutableRefObject,\n  ReactElement,\n  useEffect,\n  useRef,\n} from 'react';\nimport { ISet, Team } from '../app/types';\nimport { Body, Cell, Column, Foot, Head, Table } from './styles';\nimport { IProps } from './types';\n\nexport const Scoreboard: FunctionComponent<IProps> = ({\n  game,\n  teams,\n}: IProps): ReactElement => {\n  const bodyColumnRef: MutableRefObject<HTMLDivElement | null> = useRef(null); // tslint:disable-line: no-null-keyword\n  useEffect(() => {\n    const { current } = bodyColumnRef;\n    if (current === null) return undefined;\n\n    current.scrollIntoView({ behavior: 'smooth', block: 'end' });\n  }, [game.length]);\n\n  return (\n    <Table>\n      <Head>\n        {teams.map((team: Team) => (\n          <Column key={team}>\n            <Cell>{team.toUpperCase()}</Cell>\n          </Column>\n        ))}\n      </Head>\n\n      <Body>\n        {teams.map((team: Team) => (\n          <Column key={team} ref={bodyColumnRef}>\n            {game.map(\n              (set: ISet) =>\n                set.score && <Cell key={set.round}>{set.score[team]}</Cell>, // tslint:disable-line: strict-boolean-expressions\n            )}\n          </Column>\n        ))}\n      </Body>\n\n      <Foot>\n        {teams.map((team: Team) => (\n          <Column key={team}>\n            <Cell>\n              {game.reduce(\n                (sum: number, set: ISet) =>\n                  set.score ? sum + set.score[team] : sum,\n                0,\n              )}\n            </Cell>\n          </Column>\n        ))}\n      </Foot>\n    </Table>\n  );\n};\n","import styled, {\n  createGlobalStyle,\n  DefaultTheme,\n  GlobalStyleComponent,\n  StyledComponent,\n} from 'styled-components';\nimport { FELT_GREEN } from '../../constants/colors';\n\nconst SPACING: number = 1;\n\nexport const Felt: StyledComponent<'div', {}> = styled.div`\n  background-color: ${FELT_GREEN};\n  box-shadow: inset 0 0 10rem black;\n  display: grid;\n  grid-template: minmax(0, 1fr) auto / 1fr;\n  height: calc(100vh - ${SPACING + SPACING}rem);\n  padding: ${SPACING}rem;\n\n  @media screen and (orientation: landscape) {\n    grid-gap: ${SPACING}rem;\n    grid-template: 1fr / minmax(min-content, 2fr) minmax(min-content, 1fr);\n    overflow: auto;\n  }\n`;\n\nexport const GlobalStyle: GlobalStyleComponent<\n  {},\n  DefaultTheme\n> = createGlobalStyle`\n  * {\n    font-family: 'Roboto', sans-serif;\n    }\n`;\n","/* tslint:disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import 'normalize.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-roboto';\nimport { App } from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement: HTMLElement | null = document.getElementById('root');\n\nReactDOM.render(<App />, rootElement);\n\nif (module.hot) {\n  module.hot.accept('./components/app', async () => {\n    const { App: NextApp } = await import('./components/app');\n    ReactDOM.render(<NextApp />, rootElement);\n  });\n}\n\n/*\nIf you want your app to work offline and load faster, you can change\nunregister() to register() below. Note this comes with some pitfalls.\nLearn more about service workers: http://bit.ly/CRA-PWA\n*/\nserviceWorker.unregister();\n","import React, { FunctionComponent, ReactElement, useState } from 'react';\nimport { MAXIMUM_POINTS } from '../../constants/game';\nimport { Keypad } from '../keypad';\nimport { Scoreboard } from '../scoreboard';\nimport { Felt, GlobalStyle } from './styles';\nimport { Game, IResult, ISet, Phases, Team } from './types';\n\nexport const App: FunctionComponent = (): ReactElement => {\n  const [teams] = useState<Team[]>(['vi', 'de']);\n  const [game, setGame] = useState<Game>([{ round: 1 }]);\n  const currentSet: ISet = game[game.length - 1];\n  const [phase, setPhase] = useState(Phases.Bidding);\n\n  const updateBid: (bid: IResult) => void = (bid: IResult): void => {\n    setGame([...game.slice(0, -1), { ...currentSet, bid }]);\n    setPhase(Phases.Score);\n  };\n\n  const updateScore: (highestScore: IResult) => void = (\n    highestScore: IResult,\n  ): void => {\n    const { bid } = currentSet;\n    if (!bid) return;\n    const { points: biddingPoints, team: biddingTeam } = bid;\n\n    const score: { [K in Team]: number } = teams.reduce(\n      (result: { [K in Team]: number }, team: Team) => {\n        result[team] =\n          team === highestScore.team\n            ? highestScore.points\n            : MAXIMUM_POINTS - highestScore.points;\n\n        if (team === biddingTeam && result[team] < biddingPoints) {\n          result[team] = -biddingPoints;\n        }\n\n        return result;\n      },\n      {} as { [K in Team]: number }, // tslint:disable-line: no-object-literal-type-assertion\n    );\n\n    setGame([\n      ...game.slice(0, -1),\n      { ...currentSet, score },\n      { round: currentSet.round + 1 },\n    ]);\n    setPhase(Phases.Bidding);\n  };\n\n  const updateSet: (result: IResult) => void =\n    phase === Phases.Bidding ? updateBid : updateScore;\n\n  return (\n    <>\n      <GlobalStyle />\n      <Felt>\n        <Scoreboard game={game} teams={teams} />\n        <Keypad phase={phase} teams={teams} updateSet={updateSet} />\n      </Felt>\n    </>\n  );\n};\n"],"sourceRoot":""}